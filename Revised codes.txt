1. Subset Generation

public static void subSet(int i, String s, StringBuilder ans) {
        if(i == s.length()) {
            String str = ans.toString();
            System.out.println(str);
            
            return;
        }

        char c = s.charAt(i);
        ans.append(c);
        subSet(i+1, s, ans);
        
        ans.deleteCharAt(ans.length()-1);
        subSet(i+1, s, ans);
    }



2.  Find Permutations

public static void permutations(String s, StringBuilder ans) {
        if(s.length() == 0) {
            String str = ans.toString();
            System.out.println(str);

            return;
        }

        for(int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            ans.append(c);

            String newStr = s.substring(0, i) + s.substring(i+1);
            permutations(newStr, ans);

            ans.deleteCharAt(ans.length()-1);
        }
    }


3. Merge Sort

public static void merge(int[] arr, int s, int mid, int e) {
        int max = Integer.MAX_VALUE;

        ArrayList<Integer> left = new ArrayList<>();
        for(int i=0; i<mid-s+1; i++) left.add(arr[i+s]);
        left.add(max);

        ArrayList<Integer> right = new ArrayList<>();
        for(int i=0; i<e-mid; i++) right.add(arr[i+mid+1]);
        right.add(max);

        int l=0, r=0;
        for(int i=s; i<=e; i++) {
            if(left.get(l) <right.get(r)) {
                arr[i] = left.get(l);
                l++;
            }
            else {
                arr[i] = right.get(r);
                r++;
            }
        }
    }


4. kth Ancestor of a node in BT

public static int kth(Node root, int n, int k) {
        if(root == null) return -1;
        if(root.data == n) return 0;
        int left = kth(root.left, n,  k);
        int right = kth(root.right, n, k);

        if(left == -1 && right == -1)
        return -1;

        int max = Math.max(left, right)+1;
        if(max == k) System.out.print(root.data);

        return max;
    }


5. Diameter of Tree

static class Info {
        int d;
        int h;
         
        public Info(int diameter, int height) {
            this.d = diameter;
            this.h = height;
        }
    }

    public static Info cal(Node root) {
        if(root == null)
        return new Info(0, 0);

        Info left = cal(root.left);
        Info right = cal(root.right);

        int sd = left.h + right.h + 1;
        
        int height = Math.max(left.h, right.h) + 1;
        int diameter = Math.max(sd, Math.max(left.d, right.d));

        return new Info(diameter, height);
    }


6. TopView of a Tree

static class Info {
        int hd;
        Node n;

        public Info(Node node, int hd) {
            this.n = node;
            this.hd = hd;
        }
    }

    public static void topView(Node root) {
        Queue<Info> q = new LinkedList<>();
        HashMap<Integer, Node> m = new HashMap<>();

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        q.add(new Info(root,0));

        while(!q.isEmpty()) {
            Info curr = q.remove();

            if(!m.containsKey(curr.hd))
            m.put(curr.hd, curr.n);

            if(curr.n.left != null) {
                q.add(new Info(curr.n.left, curr.hd-1));
                min = Math.min(min, curr.hd-1);
            }

            if(curr.n.right != null) {
                q.add(new Info(curr.n.right, curr.hd+1));
                max = Math.max(max, curr.hd+1);
            }
        }    
        
        for(int i=min; i<=max; i++) 
        System.out.print(m.get(i).data + " ");
    }


7. Delete any node in a BST

public static Node successor(Node root) {
        while(root.left != null) root = root.left;
        return root;
    }

    public static Node del(Node root, int data) {
        if(root.data < data) root.right = del(root.right, data);
        else if(root.data > data) root.left = del(root.left, data);

        else {
            if(root.left == null && root.right == null)
            return null;

            if(root.left == null) return root.right;
            else if(root.right == null) return root.left;

            Node IS = successor(root.right);
            root.data = IS.data;
            root.right = del(root.right, IS.data);
        }

        return root;
    }


8. m.put(i, m.getOrDefault(i,  0)+1)
    Set<Integer> keys = m.keySet();
    for(Integer i:keys) 
	i-> key
	m.get(i) -> value


9. Word Break

public static boolean wordBreak(String key) {
        if(key.length() == 0) return true;

        for(int i=1; i<=key.length(); i++) {
            String find = key.substring(0, i);
            String callFor = key.substring(i, key.length());

            if(search(find) && wordBreak(callFor)) return true;
        }

        return false;
    }


10. 




















